/* The Google Maps Places Autocomplete dropdown box is added in the
   end of the document body, and we must scope the global style
   overrides within a class generated from the SearchBar component.

   Classes available for customization can be seen at:

   https://developers.google.com/maps/documentation/javascript/places-autocomplete#style_autocomplete
*/
.topLevelBody {
  /* stylelint-disable selector-class-pattern */
  & :global(.pac-container[style]) {
    /* Generated autocompletion has inline styles, thus the ugly override.
       See: https://css-tricks.com/override-inline-styles-with-css/ */
    width: 20em !important;
    margin-top: 10px;
  }

  & :global(.pac-item) {
    line-height: 40px;
  }
  & :global(.pac-icon) {
    margin-top: 10px;
  }
  /* stylelint-enable selector-class-pattern */
}

.mobileMenuOpen {} /* stylelint-disable-line block-no-empty */

.root {
  height: 100%;
}

.form {
  display: none;
  position: relative;
  margin-top: 1.2em; /* center vertically within Topbar */
  padding-left: var(--SearchBar_sidePadding);
  z-index: 1; /* TODO: move to var */

  @nest .mobileMenuOpen & {
    display: flex;
    position: absolute;
    left: 0;
    right: 0;
    background-color: #34495e;
    margin-top: 0;
  }

  /* TODO: custom media query */
  @media (min-width: 40em) {
    display: inline-flex;
    width: 28.3em;
  }

  &:hover .focusContainer::before {
    border-color: var(--SearchBar_borderColorActive);
  }

  /* When any child element of this form has focus, hilight the whole
     form using a pseudo element. See: http://stackoverflow.com/a/11167056 */
  & > *:focus ~ .focusContainer::before {
    border-color: var(--SearchBar_borderColorActive);
  }
}

/* Since we cannot apply focus styles straight to the form when
   anything within it has focus, we have to create a special container
   for the focus styles to cover the whole form area. */
.focusContainer::before {
  display: none;
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  border: 1px solid var(--SearchBar_borderColor);
  z-index: var(--SearchBar_focusContainerZIndex); /* Required to allow mouse event to the inputs/buttons. */
  transition: border-color 0.1s ease-in;

  /* TODO: custom media query */
  @media (min-width: 40em) {
    display: block;
    border-radius: 10em; /* Big enough to be fully rounded */
  }
}

.keywordInput,
.locationInput {
  margin: var(--SearchBar_textPadding) 0 var(--SearchBar_textPadding) 0;
  padding: 0;
  line-height: var(--SearchBar_lineHeight);
  border: none;
  color: #fff; /* TODO: get from var */
  transition: color 0.1s ease-in;
  font-weight: var(--SearchBar_inputFontWeight);
  z-index: var(--SearchBar_childZIndex);

  -webkit-font-smoothing: antialiased;

  @nest .mobileMenuOpen & {
    background-color: #34495e;
  }

  &:only-of-type {
    width: 100%;
    padding: 0;
    margin-right: var(--SearchBar_inputButtonMargin);

    &:focus {
      width: 100%;
    }
  }

  @media (min-width: 40em) {
    color: var(--SearchBar_textColor);

    &::placeholder {
      color: var(--SearchBar_textColor);
      transition: color 0.1s ease-in;
    }

    @nest .form:hover & {
      color: var(--SearchBar_textColorActive);

      &::placeholder {
        color: var(--SearchBar_textColorActive);
      }

      &:focus {
        /* focus color should override the active color */
        color: var(--SearchBar_textColorFocus);
      }
    }

    &:focus {
      outline: none;
      color: var(--SearchBar_textColorFocus);

      /* Trigger focus styles for the search icon SVG when these inputs have focus. */
      & ~ .searchButton svg {
        stroke: var(--SearchBar_iconColorActive);
      }
    }
  }
}

.keywordInput {
  width: var(--SearchBar_keywordInputWidth);
  padding-right: calc(2 * var(--SearchBar_textPadding));
  transition: width 0.25s ease-out;

  &:focus {
    width: var(--SearchBar_keywordInputFocusWidth);

    & ~ .locationInput {
      width: calc(100% - var(--SearchBar_keywordInputFocusWidth));
    }
  }
}

.locationInput {
  width: calc(100% - var(--SearchBar_keywordInputWidth));
}

/* Additional separating styles are added only when the two inputs are
   next to each other. */
.keywordInput + .locationInput {
  border-left: 1px solid var(--SearchBar_borderColor);
  padding-left: calc(2 * var(--SearchBar_textPadding));
  margin-right: var(--SearchBar_inputButtonMargin);
}

.searchButton {
  /* Position absolutely instead of in the flexbox to avoid animation jank. */
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  margin: 0;
  padding: 0 var(--SearchBar_sidePadding);
  padding-top: 2px; /* Fix position. */
  line-height: var(--SearchBar_searchButtonLineHeight);
  border: none;
  background-color: transparent;
  cursor: pointer;
  z-index: var(--SearchBar_childZIndex);

  &:hover {
    background-color: transparent;
  }

  & svg {
    line-height: 1;
    width: 1em;
    height: 1em;
    stroke: var(--SearchBar_iconColor);
    transition: stroke 0.1s ease-in;

    @nest .form:hover & {
      stroke: var(--SearchBar_iconColorActive);

      &:hover {
        stroke: var(--SearchBar_iconColorFocus);
      }
    }
  }

  @nest .form:hover &:hover svg {
    stroke: var(--SearchBar_iconColorFocus);
  }

  &:focus {
    outline: none;

    & svg {
      stroke: var(--SearchBar_iconColorFocus);
      outline: 1px solid var(--SearchBar_borderColor);
    }
  }
}

.mobileToggle {
  display: inline-block;
  margin: 0;
  padding: 0;
  width: 5em;
  height: 100%;
  background-color: transparent;
  border: none;
  stroke: #000;
  cursor: pointer;

  &:hover {
    background-color: transparent;
  }

  /* TODO: custom media query */
  @media (min-width: 40em) {
    display: none;
  }
}
